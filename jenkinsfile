
pipeline {
    agent any

    environment {
        SSH_CREDENTIALS_ID = "ssh"
        REMOTE_SERVER = "k11a102.p.ssafy.io"
        FRONTEND_DIR = 'frontend'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        GIT_REPO_URL = 'https://lab.ssafy.com/s11-final/S11P31A102'
        CREDENTIALS_ID = 'jenkins'
        DOCKER_HUB_USERNAME = 'geunwook'
        DOCKER_HUB_PASSWORD = 'az5483az!!'
    }

    stages {
        // 1. 현재 빌드가 진행 중인 브랜치 정보 출력
        stage('Print Branch Info') {
            steps {
                script {
                    echo "Current GIT_BRANCH: ${env.GIT_BRANCH}"
                    def branch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Current branch: ${branch}"
                    echo "REMOTE_SERVER: ${env.REMOTE_SERVER}"
                }
            }
        }

        // 2. 코드 체크아웃
        stage('Checkout') {
            steps {
                script {
                    // git branch: 'master', credentialsId: CREDENTIALS_ID, url: GIT_REPO_URL
                    git branch: 'develop', credentialsId: CREDENTIALS_ID, url: GIT_REPO_URL
                }
            }
        }

        // 3. 프론트엔드 디렉토리 확인
        stage('List Frontend Directory') {
            steps {
                sh 'mkdir -p frontend'
                sh 'ls -l frontend'
            }
        }

        // 4. Flutter Docker 이미지 빌드
        stage('Build Flutter Docker Image') {
            steps {
                script {
                    dir(FRONTEND_DIR) {
                        // Dockerfile.prod 사용하여 Docker 이미지 빌드
                        sh 'docker build -t geunwook/flutter:latest -f Dockerfile.prod .'
                    }
                }
            }
        }

        // 5. 원격 서버에 배포
        stage('Deploy Flutter to Remote Server') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                        # Docker Hub에서 최신 이미지 pull
                        ssh -o StrictHostKeyChecking=no ubuntu@${REMOTE_SERVER} << EOF
                            docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}
                            docker pull geunwook/flutter-frontend:latest
EOF

                        # Docker Compose 파일 전송
                        scp -o StrictHostKeyChecking=no ${DOCKER_COMPOSE_FILE} ubuntu@${REMOTE_SERVER}:/home/ubuntu/S11P31A102

                        # 원격 서버에서 Docker Compose 실행
                        ssh -o StrictHostKeyChecking=no ubuntu@${REMOTE_SERVER} << EOF
                            cd /home/ubuntu/S11P31A102
                            docker-compose -f ${DOCKER_COMPOSE_FILE} down
                            docker-compose -f ${DOCKER_COMPOSE_FILE} up -d --build
EOF
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // 파이프라인 실행 후 워크스페이스 정리 (불필요한 파일 삭제)
            cleanWs()
        }
    }
}
